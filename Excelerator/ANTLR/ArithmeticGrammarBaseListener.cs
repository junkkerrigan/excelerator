//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\ArithmeticGrammar.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IArithmeticGrammarListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class ArithmeticGrammarBaseListener : IArithmeticGrammarListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ArithmeticGrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression([NotNull] ArithmeticGrammarParser.ExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ArithmeticGrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression([NotNull] ArithmeticGrammarParser.ExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Parenthesis</c>
	/// labeled alternative in <see cref="ArithmeticGrammarParser.component"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenthesis([NotNull] ArithmeticGrammarParser.ParenthesisContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Parenthesis</c>
	/// labeled alternative in <see cref="ArithmeticGrammarParser.component"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenthesis([NotNull] ArithmeticGrammarParser.ParenthesisContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NegativeNumber</c>
	/// labeled alternative in <see cref="ArithmeticGrammarParser.component"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNegativeNumber([NotNull] ArithmeticGrammarParser.NegativeNumberContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NegativeNumber</c>
	/// labeled alternative in <see cref="ArithmeticGrammarParser.component"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNegativeNumber([NotNull] ArithmeticGrammarParser.NegativeNumberContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Minimum</c>
	/// labeled alternative in <see cref="ArithmeticGrammarParser.component"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMinimum([NotNull] ArithmeticGrammarParser.MinimumContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Minimum</c>
	/// labeled alternative in <see cref="ArithmeticGrammarParser.component"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMinimum([NotNull] ArithmeticGrammarParser.MinimumContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Maximum</c>
	/// labeled alternative in <see cref="ArithmeticGrammarParser.component"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMaximum([NotNull] ArithmeticGrammarParser.MaximumContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Maximum</c>
	/// labeled alternative in <see cref="ArithmeticGrammarParser.component"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMaximum([NotNull] ArithmeticGrammarParser.MaximumContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Rest</c>
	/// labeled alternative in <see cref="ArithmeticGrammarParser.component"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRest([NotNull] ArithmeticGrammarParser.RestContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Rest</c>
	/// labeled alternative in <see cref="ArithmeticGrammarParser.component"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRest([NotNull] ArithmeticGrammarParser.RestContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Multiplication</c>
	/// labeled alternative in <see cref="ArithmeticGrammarParser.component"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiplication([NotNull] ArithmeticGrammarParser.MultiplicationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Multiplication</c>
	/// labeled alternative in <see cref="ArithmeticGrammarParser.component"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiplication([NotNull] ArithmeticGrammarParser.MultiplicationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Addition</c>
	/// labeled alternative in <see cref="ArithmeticGrammarParser.component"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddition([NotNull] ArithmeticGrammarParser.AdditionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Addition</c>
	/// labeled alternative in <see cref="ArithmeticGrammarParser.component"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddition([NotNull] ArithmeticGrammarParser.AdditionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Number</c>
	/// labeled alternative in <see cref="ArithmeticGrammarParser.component"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumber([NotNull] ArithmeticGrammarParser.NumberContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Number</c>
	/// labeled alternative in <see cref="ArithmeticGrammarParser.component"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumber([NotNull] ArithmeticGrammarParser.NumberContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Modulo</c>
	/// labeled alternative in <see cref="ArithmeticGrammarParser.component"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterModulo([NotNull] ArithmeticGrammarParser.ModuloContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Modulo</c>
	/// labeled alternative in <see cref="ArithmeticGrammarParser.component"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitModulo([NotNull] ArithmeticGrammarParser.ModuloContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>UnaryMinus</c>
	/// labeled alternative in <see cref="ArithmeticGrammarParser.component"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnaryMinus([NotNull] ArithmeticGrammarParser.UnaryMinusContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>UnaryMinus</c>
	/// labeled alternative in <see cref="ArithmeticGrammarParser.component"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnaryMinus([NotNull] ArithmeticGrammarParser.UnaryMinusContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Cell</c>
	/// labeled alternative in <see cref="ArithmeticGrammarParser.component"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCell([NotNull] ArithmeticGrammarParser.CellContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Cell</c>
	/// labeled alternative in <see cref="ArithmeticGrammarParser.component"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCell([NotNull] ArithmeticGrammarParser.CellContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Power</c>
	/// labeled alternative in <see cref="ArithmeticGrammarParser.component"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPower([NotNull] ArithmeticGrammarParser.PowerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Power</c>
	/// labeled alternative in <see cref="ArithmeticGrammarParser.component"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPower([NotNull] ArithmeticGrammarParser.PowerContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
